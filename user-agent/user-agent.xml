<?xml version="1.0" encoding="UTF-8"?>

<?oxygen RNGSchema="http://expath.org/ns/xmlspec/xmlspec.rnc" type="compact"?>

<spec xmlns:spec="http://expath.org/ns/xmlspec" role="editors-copy">
   <header>
      <title>User Agent Module</title>
      <version>1.0</version>
      <w3c-designation>w3c-designation</w3c-designation>
      <w3c-doctype>EXPath Candidate Module</w3c-doctype>
      <pubdate>
         <day>12</day>
         <month>February</month>
         <year>2012</year>
      </pubdate>
      <latestloc>
         <loc href="http://expath.org/spec/location"/>
      </latestloc>
      <authlist>
         <author role="editor">
            <name id="cteodorescu">Claudius Teodorescu</name>
            <affiliation>XML Consultant</affiliation>
         </author>
      </authlist>
	<copyright>
		<p>
			Copyright Â© 2013 Claudius Teodorescu, published by the
			<loc href="http://w3.org/community/expath/">EXPath Community Group</loc>
			under the
			<loc href="https://www.w3.org/community/about/agreements/cla/">W3C Community Contributor
				License Agreement (CLA)</loc>
			. A human-readable
			<loc href="http://www.w3.org/community/about/agreements/cla-deed/">summary</loc>
			is
			available.
		</p>
		<p>
			This specification was published by the
			<loc href="http://www.w3.org/community/expath/">EXPath Community Group</loc>
			. It is not a W3C Standard nor is it on the W3C
			Standards Track. Please note that under the
			<loc href="http://www.w3.org/community/about/agreements/cla/">W3C Community Contributor
				License Agreement (CLA)</loc>
			there is a limited opt-out and other conditions apply.
			Learn more about
			<loc href="http://www.w3.org/community/">W3C Community and Business
				Groups</loc>
			.
		</p>
	</copyright>
      <abstract>
         <p>This proposal defines a <phrase id="module-description">module comprising a set of functions for actions within an user agent</phrase>.
         It has been designed to be compatible with XQuery 3.0 and XSLT 3.0, as well as any other standard based on XPath 3.0.</p>
      </abstract>
      <status>
         <p>Must be ignored, but is required by the schema...</p>
      </status>
      <langusage>
         <language>langusage</language>
      </langusage>
      <revisiondesc>
         <p>revisiondesc</p>
      </revisiondesc>
   </header>
   <body>
      <div1>
         <head>Introduction</head>
         <p>This proposal defines a <phrase>module for providing functions dealing with actions within
         an user agent</phrase>. It has been designed to be compatible with XQuery 3.0 and XSLT 3.0, as well as any other standard
         based on XPath 3.0.</p>
         <div2>
            <head>Namespace conventions</head>
            <p>The module defined by this document defines functions and elements in the namespace
                  <code id="module-namespace">http://expath.org/ns/user-agent</code>. In this document, the
                  <code id="module-prefix">ua</code> prefix, when used, is bound to this namespace URI.</p>
            <p>Datatypes are defined in the namespace <code>http://expath.org/ns/user-agent/datatype</code>. In
               this document, the <code>ua-dt</code> prefix, when used, is bound to this namespace
               URI.</p>                  
            <p>Error codes are defined in the namespace <code>http://expath.org/ns/error</code>. In
               this document, the <code>err</code> prefix, when used, is bound to this namespace
               URI.</p>
         </div2>
         <div2>
            <head>Error management</head>
            <p>Error conditions are identified by a code (a <code>QName</code>). When such an error
               condition is reached during the execution of the function, a dynamic error is thrown,
               with the corresponding error code (as if the standard XPath function
                  <code>error</code> had been called).</p>
         </div2>
      </div1>
       <div1>
         <head>External variables</head>
         <p>These variables are available to the XQuery scripts associated with a document.</p>
         <div2>
            <head>The <code>$ua:document</code> variable</head>
            <p>This variable is bound to the document itself.</p>
         </div2>  
         <div2>
            <head>The <code>$ua:cursor-position</code> variable</head>
            <p></p>
         </div2>
         <div2>
            <head>The <code>$ua:selector</code> variable</head>
            <p></p>
         </div2>
      </div1>
       <div1 id="datatypes">
         <head>Datatypes</head>
         <p>These custom datatypes are defined to be used by the module functions.</p>
         <div2>
            <head>The <code>ua-dt:xpath-selector</code> datatype</head>
            <p>This constructor functions casts the input to a custom datatype that provides XPath type selector to module functions to take as argument.</p>
            <eg>
<spec:function>ua-dt:xpath-selector</spec:function>($arg as <spec:type>xs:anyAtomicType?</spec:type>) as <spec:type>ua-dt:xpath-selector?</spec:type>
</eg>            
         </div2>         
         <div2>
            <head>The <code>ua-dt:css-selector</code> datatype</head>
            <p>This constructor functions casts the input to a custom datatype that provides CSS type selector to module functions to take as argument.</p>
            <eg>
<spec:function>ua-dt:css-selector</spec:function>($arg as <spec:type>xs:anyAtomicType?</spec:type>) as <spec:type>ua-dt:css-selector?</spec:type>
</eg>            
         </div2>        
      </div1>      
      <div1 id="selectors">
         <head>Selectors</head>
         <p>Many functions in this specification use selectors for nodes as parameters. These selectors can be of two types, namely XPath selectors, and CSS selectors.</p>
         <p>In the context of this specification, if multiple nodes are selected, then the invoking action is executed for each one of them, and if the selector selects
         no node, this is an error <bibref ref="errUA04"/>.</p>
         <div2>
            <head>The XPath selectors</head>
            <p>These selectors consist of valid XPath expressions, see <bibref ref="xpath-30"/>. In order to supply XPath expressions as parameters, one has to use a 
            constructor function, according to <specref ref="datatypes" />.</p>
         </div2>
         <div2>
            <head>The CSS selectors</head>
            <p>These selectors are valid CSS selectors, see <bibref ref="css-selectors"/>. In order to supply CSS selectors as parameters, one has to use a 
            constructor function, according to <specref ref="datatypes" />.</p>
         </div2>
      </div1>
      <div1>
         <head>Events</head>
         <p>These functions are meant to handle DOM events.</p>
         <div2>
            <head>The <code>ua:create-event()</code> function</head>
            <p>This function creates a custom event. It has two signatures: the first one takes as argument only the event type, while the initalization parameters are set to their default values, and the
            second consists of a map containing the initialization parameters.</p>
            <eg>
<spec:function>ua:create-event</spec:function>($type as <spec:type>xs:QName</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:create-event</spec:function>($type as <spec:type>xs:QName</spec:type>, $initialization-parameters as <spec:type>map(xs:string, item()*)</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$type</code> is the name of the event.</p>
               </item>
               <item>
                  <p><code>$initialization-parameters</code> are the parameters needed for initalization of the event. For details, see <specref ref="event-initialization-parameters"/></p>
               </item>               
            </ulist>
            <div3 id="event-initialization-parameters">
            	<head>The event initialization parameters</head>
	            <p>There are three initialization parameters:</p>
	            <ulist>
	               <item>
	                  <p><code>bubbles</code> is a boolean indicating if the event bubbles up through the DOM or not. Its default value is <code>false()</code>.</p>
	               </item>
	               <item>
	                  <p><code>cancelable</code> is a boolean indicating if the event is cancelable. Its default value is <code>false()</code>.</p>
	               </item>
	               <item>
	                  <p><code>detail</code> is the data passed when initializing the event.</p>
	               </item>
	            </ulist>
	            <p>For examples of usage, see <specref ref="create-event-scenario"/>.</p>
	        </div3>                        
         </div2>         
         <div2>
            <head>The <code>ua:add-event-listener()</code> function</head>
            <p>This function registers an event listener.</p>
            <eg>
<spec:function>ua:add-event-listener</spec:function>($event-target-selector as <spec:type>xs:anyType</spec:type>, $event-type as <spec:type>xs:string</spec:type>,
	$listener as <spec:type>item()</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:add-event-listener</spec:function>($event-target as <spec:type>xs:string</spec:type>, $event-type as <spec:type>xs:string</spec:type>,
	$listener as <spec:type>item()</spec:type>, $useCapture as <spec:type>xs:boolean</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$event-target-selector</code> is the selector for the target of the event. The target may be an element, the document itself, etc.
                  See <bibref ref="dom-4"/> for more details.</p>
               </item>
               <item>
                  <p><code>$event-type</code> is the type of the event to listen for.</p>
               </item>
               <item>
                  <p><code>$listener</code> is the handler of an action, a block of code, or a function to be executed.</p>
               </item>
               <item>
                  <p><code>$useCapture</code> is the indication that the user wishes to initiate capture. Its default value is <code>false()</code>.</p>
               </item>               
            </ulist>            
         </div2>         
         <div2>
            <head>The <code>ua:remove-event-listener()</code> function</head>
            <p>This function removes a registered event listener.</p>
            <eg>
<spec:function>ua:remove-event-listener</spec:function>($event-target-selector as <spec:type>xs:anyType</spec:type>, $event-type as <spec:type>xs:string</spec:type>,
	$listener as <spec:type>item()</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:add-event-listener</spec:function>($event-target-selector as <spec:type>xs:anyType</spec:type>, $event-type as <spec:type>xs:string</spec:type>,
	$listener as <spec:type>item()</spec:type>, $useCapture as <spec:type>xs:boolean</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$event-target-selector</code> is the selector for the target of the event. The target may be an element, the document itself, etc.
                  See <bibref ref="dom-4"/> for more details.</p>
               </item>
               <item>
                  <p><code>$event-type</code> is the event type being removed.</p>
               </item>
               <item>
                  <p><code>$listener</code> is the handler of an action, a block of code, or a function to be removed.</p>
               </item>
               <item>
                  <p><code>$useCapture</code> is the indication that the current listener was registered as a capturing listener or not. Its default value is <code>false()</code>.</p>
               </item>               
            </ulist>            
         </div2>
         <div2>
            <head>The <code>ua:dispatch-event()</code> function</head>
            <p>This function dispatches an event at the specified target, thus being invoked in the appropriate order the correspondent event listeners.</p>
            <eg>
<spec:function>ua:dispatch-event</spec:function>($event-name as <spec:type>xs:string</spec:type>, $event-target-selector as <spec:type>xs:anyType</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$event-name</code> is the name of event to dispatch.</p>
               </item>            
               <item>
                  <p><code>$event-target-selector</code> is the selector for the target of the event. The target may be an element, the document itself, etc.
                  See <bibref ref="dom-4"/> for more details.</p>
               </item>              
            </ulist>            
         </div2>
      </div1>      
      <div1>
         <head>Actions</head>
         <p>These functions define actions to be executed by direct invoking or when a certain event occurs.</p>
         <div2>
            <head>The <code>ua:action()</code> function</head>
            <p>This function defines an action to be invoked when a DOM event occurs.</p>
            <eg>
<spec:function>ua:action</spec:function>($id as <spec:type>xs:ID</spec:type>,
	$parameters as <spec:type>map(xs:string, xs:string)</spec:type>,
	$code-block as <spec:type>item()*</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:action</spec:function>($id as <spec:type>xs:ID</spec:type>,
	$event-name as <spec:type>xs:QName</spec:type>,
	$parameters as <spec:type>map(xs:string, xs:string</spec:type>,
	$code-block as <spec:type>item()*</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$id</code> is the action's identificator. If the identificator is not unique within the script, this is an error <bibref ref="errUA01"/>.</p>
               </item>
               <item>
                  <p><code>$event-name</code> represents the name of the event that triggers the execution of the action.
                   If the event does not exist, this is an error <bibref ref="errUA02"/>.</p>
               </item>                
               <item>
                  <p><code>$parameters</code> represents the parameters passed for the execution of the action.</p>
               </item>   
               <item>
                  <p><code>$code-block</code> represents the code to be executed.</p>
               </item>
            </ulist>            
         </div2>
      </div1>
      <div1>
         <head>Mutation observers</head>
         <p>These functions deal with Mutation observers, as they are defined in <bibref ref="dom-4"/>.</p>
         <div2>
            <head>The <code>ua:observer()</code> function</head>
            <p>This function creates a mutations observer. It has two signatures, one taking as second parameter a list of action handlers separated by spaces,
            and the other one considering as second parameter a function item.</p>
            <eg>
<spec:function>ua:observer</spec:function>($id as <spec:type>xs:ID</spec:type>, $action-handlers as <spec:type>xs:IDREFS</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:observer</spec:function>($id as <spec:type>xs:ID</spec:type>, $action as <spec:type>function(*)</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$id</code> is the observer's identificator. If the identificator is not unique within the script, this is an error <bibref ref="errUA01"/>.</p>
               </item>            
               <item>
                  <p><code>$action-handlers</code> is the list of action handlers separated by spaces, to be executed. If the action handler are not unique within the script,
                  this is an error <bibref ref="errUA01"/>.</p>
               </item>
               <item>
                  <p><code>$action</code> is the function item to be executed.</p>
               </item>
            </ulist>            
         </div2>
         <div2>
            <head>The <code>ua:connect-observer()</code> function</head>
            <p>This function connects an observer to a node, in order to observe the node mutations.</p>
            <eg>
<spec:function>ua:connect-observer</spec:function>($observer-handler as <spec:type>xs:IDREF</spec:type>, $node-selector as <spec:type>xs:string</spec:type>,
	$options as <spec:type>map(xs:string, xs:string)</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$observer-handler</code> is the observer's handler. If the identificator does not exist, this is an error <bibref ref="errUA03"/>.</p>
               </item>            
               <item>
                  <p><code>$node-selector</code> is the selector used to select the nodes to be observed; see <specref ref="selectors"/>. If the selector selects multiple
                  nodes, all these nodes are observed.</p>
               </item>
               <item>
                  <p><code>$options</code> are the options describing the properties and values for observing the selected node. See <bibref ref="dom-4"/> for more
                  details.</p>
               </item>
            </ulist>            
         </div2>
         <div2>
            <head>The <code>ua:disconnect-observer()</code> function</head>
            <p>This function disconnects an observer from a node. The observer will stop observing the node until it will be connected again to the node.</p>
            <eg>
<spec:function>ua:disconnect-observer</spec:function>($observer-handler as <spec:type>xs:IDREF</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$observer-handler</code> is the observer's handler. If the identificator does not exist, this is an error <bibref ref="errUA03"/>.</p>
               </item>
            </ulist>            
         </div2>         
      </div1>
      <div1>
         <head>Templates</head>
         <p>These function are for handling templates.</p>
         <div2>
            <head>The <code>ua:template()</code> function</head>
            <p>This function creates a template.</p>
            <eg>
<spec:function>ua:template</spec:function>($id as <spec:type>xs:ID</spec:type>, $content as <spec:type>item()*</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$id</code> is the template's identificator. If the identificator is not unique within the script, this is an error <bibref ref="errUA01"/>.</p>
               </item>            
               <item>
                  <p><code>$content</code> is the content of the template.</p>
               </item>
            </ulist>            
         </div2>
         <div2>
            <head>The <code>ua:attach-template()</code> function</head>
            <p>This function attaches a template to one or more nodes. It has two signatures, the second one attaching a template in case when an event is dispatched.</p>
            <eg>
<spec:function>ua:attach-template</spec:function>($node-selector as <spec:type>xs:string</spec:type>, $template-id as <spec:type>xs:IDREF</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:attach-template</spec:function>($node-selector as <spec:type>xs:string</spec:type>, $template-id as <spec:type>xs:IDREF</spec:type>, $event-name as <spec:type>xs:string</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$node-selector</code> is the selector used to select the nodes to attache the template to; see <specref ref="selectors"/>. If the selector selects multiple
                  nodes, the template is attached to all these nodes.</p>
               </item>            
               <item>
                  <p><code>$template-id</code> is the identificator of the template to be attached.</p>
               </item>
               <item>
                  <p><code>$event-name</code> is the name of the event triggering the attaching of the template.</p>
               </item>               
            </ulist>            
         </div2>         
         <div2>
            <head>The <code>ua:dettach-template()</code> function</head>
            <p>This function dettaches a template from one or more nodes. It has two signatures, the second one dettaching a template in case when an event is dispatched.</p>
            <eg>
<spec:function>ua:dettach-template</spec:function>($node-selector as <spec:type>xs:string</spec:type>, $template-id as <spec:type>xs:IDREF</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:dettach-template</spec:function>($node-selector as <spec:type>xs:string</spec:type>, $template-id as <spec:type>xs:IDREF</spec:type>, $event-name as <spec:type>xs:string</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$node-selector</code> is the selector used to select the nodes to dettache the template from; see <specref ref="selectors"/>. If the selector selects multiple
                  nodes, the template is dettached from all these nodes.</p>
               </item>            
               <item>
                  <p><code>$template-id</code> is the identificator of the template to be dettached.</p>
               </item>
               <item>
                  <p><code>$event-name</code> is the name of the event triggering the dettaching of the template.</p>
               </item>               
            </ulist>            
         </div2>
         <div2>
            <head>The <code>ua:get-template()</code> function</head>
            <p>This function gets a template, in order to be examined, modified, etc. It returns the template as a sequence.</p>
            <eg>
<spec:function>ua:get-template</spec:function>($template-id as <spec:type>xs:IDREF</spec:type>) as <spec:type>item()*</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$template-id</code> is the identificator of the template.</p>
               </item>
            </ulist>            
         </div2>
         <div2>
            <head>The <code>ua:update-template()</code> function</head>
            <p>This function updates a template. It has two signatures, the second one updating a template in case when an event is dispatched. All the nodes having the respective template
            attached to them will have their view refreshened based upon the updated template.</p>
            <eg>
<spec:function>ua:update-template</spec:function>($template-id as <spec:type>xs:IDREF</spec:type>, $new-content as <spec:type>item()*</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <eg>
<spec:function>ua:update-template</spec:function>($template-id as <spec:type>xs:IDREF</spec:type>, $new-content as <spec:type>item()*</spec:type>, $event-name as <spec:type>xs:string</spec:type>) as <spec:type>empty()</spec:type>
</eg>
            <ulist>
               <item>
                  <p><code>$template-id</code> is the identificator of the template to be updated.</p>
               </item>
               <item>
                  <p><code>$content</code> is the new content of the template.</p>
               </item>               
               <item>
                  <p><code>$event-name</code> is the name of the event triggering the updating of the template.</p>
               </item>               
            </ulist>            
         </div2>
      </div1>         
      <div1>
            <head>Scenarios of usage</head>
		    <p>Scenarios of usage of the functions comprised by this module.</p>
			<div2 id="create-event-scenario">
				<head>Create an event</head>
				<p>This scenario presents how to create events using both signatures of the function ua:create-event(), by using default parameters or setting values to parameters.</p>
				<eg>
ua:create-event('custom-event')
				</eg>
				<eg>
ua:create-event('custom-event', map{"bubbles" := true(), "cancelable" := true(), "detail" := ("detail-1", "detail-2")})
				</eg>
				<eg>
ua:create-event('custom-event', map{"cancelable" := true(), "detail" := ("detail-1", "detail-2")})
				</eg>
				<eg>
ua:create-event('custom-event', map{"bubbles" := true()})
				</eg>
				<eg>
ua:create-event('custom-event', map{"detail" := ("detail-1", "detail-2")})
				</eg>
			</div2>
        </div1>         
      
<!--       <div1> -->
<!--          <head>Bindings</head> -->
<!--          <p>These functions deal with DOM events.</p> -->
<!--          <div2> -->
<!--             <head>The <code>ua:action()</code> function</head> -->
<!--             <p>This function returns the country code composed of 2 digits, according to ISO 3166-1 Alpha-2.</p> -->
<!--             <eg> -->
<!-- <spec:function>ua:action</spec:function>($ip-address as <spec:type>xs:string</spec:type>) as <spec:type>xs:string</spec:type> -->
<!-- </eg> -->
<!--             <ulist> -->
<!--                <item> -->
<!--                   <p><code>$ip-address</code> is the user agent's IP address. If the IP address is not valid, this is an error <bibref ref="errUA01"/>.</p> -->
<!--                </item> -->
<!--             </ulist>             -->
<!--          </div2> -->
<!--       </div1>       -->      
   </body>
   <back>
      <div1>
         <head>References</head>
         <blist>
	            <bibl id="xpath-30" key="XPath 3.0">
	               <loc href="http://w3.org/TR/xpath-30/">XML Path Language (XPath) 3.0</loc>.
	               Jonathan Robie, Don Chamberlin, Michael Dyck, John Snelson, editors. W3C Working Draft, 13 December 2011.</bibl>
	            <bibl id="xslt-30" key="XSLT 3.0">                        
	               <loc href="http://w3.org/TR/xslt-30/">XSL Transformations (XSLT) Version 3.0</loc>.
	               Michael Kay, editor. W3C Working Draft, 10 July 2012.</bibl>         
	            <bibl id="xquery-30" key="XQuery 3.0">                        
	               <loc href="http://w3.org/TR/xquery-30/">XQuery 3.0: An XML Query Language</loc>.
	               Jonathan Robie, Don Chamberlin, Michael Dyck, John Snelson, editors. W3C Working Draft, 13 December 2011.</bibl>
	            <bibl id="xpath-functions-30" key="XPath and XQuery Functions and Operators 3.0">
	               <loc href="http://w3.org/TR/xpath-functions-30/">XPath and XQuery Functions and Operators 3.0</loc>.
	               Michael Kay, editor. W3C Working Draft, 13 December 2011.</bibl>
	            <bibl id="xpath-datamodel-30" key="XQuery and XPath Data Model 3.0">
	               <loc href="http://w3.org/TR/xpath-datamodel-30/">XQuery and XPath Data Model 3.0</loc>.
               	   Norman Walsh, Anders Berglund, John Snelson, editors. W3C Working Draft, 13 December 2011.</bibl>
	            <bibl id="dom-4" key="W3C DOM4">
	               <loc href="http://w3.org/TR/dom/">W3C DOM4</loc>.
               	   Anne van Kesteren, Aryeh Gregor, Ms2ger, Alex Russell, Robin Berjon, editors. W3C Last Call Working Draft, 04 February 2014.</bibl>               	   
	            <bibl id="css-selectors" key="CSS Selectors">
	               <loc href="http://w3.org/TR/selectors/">Selectors Level 3</loc>.
	               Tantek Ãelik (Invited Expert), Elika J. Etemad (Invited Expert), Daniel Glazman (Disruptive Innovations SARL), Ian Hickson (Google),
	               Peter Linss (former editor, Netscape/AOL), John Williams (former editor, Quark, Inc.), editors. W3C Recommendation, 29 September 2011.</bibl> 
	            <bibl id="html5" key="HTML Living Standard">
	               <loc href="http://whatwg.org/specs/web-apps/current-work/multipage/">HTML Living Standard</loc>. W3C Recommendation, 6 August 2014.</bibl> 	               
         </blist>
      </div1>
      <div1>
         <head>Summary of Error Conditions</head>
         <blist id="summary-of-error-conditions">
         	<bibl id="errUA01" key="err:UA01">The identificator $id is not unique.</bibl>
         	<bibl id="errUA02" key="err:UA02">The event $event-name does not exist.</bibl>
         	<bibl id="errUA03" key="err:UA03">The identificator $id does not exist.</bibl>
         	<bibl id="errUA04" key="err:UA04">No node was selected.</bibl>         	
         </blist>
      </div1>
   </back>
</spec>
